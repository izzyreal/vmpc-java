/* Generated by Together */

package com.mpc.sequencer;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;

public class Song extends Observable {
	
    private String name;
    private List<Step> steps;

    private boolean loopEnabled;
    private int firstStep;
    private int lastStep;
   
    private Sequencer sequencer;
    
    boolean used = false;
    
    public Song(Sequencer sequencer) {
    	this.sequencer = sequencer;
    	steps = new ArrayList<Step>();
    }

    public void setLoopEnabled(boolean b) {
    	loopEnabled = b;
    }
    
    public boolean isLoopEnabled() {
    	return loopEnabled;
    }
    
    public void setFirstStep(int i) {
    	if (i<0||i>steps.size()-1) return;
    	firstStep = i;
    	if (firstStep>lastStep) setLastStep(firstStep);
    	setChanged();
    	notifyObservers("firststep");    	
    }
    
    public int getFirstStep() {
    	return firstStep;
    }
    
    public void setLastStep(int i) {
    	if (i<0||i>steps.size()-1) return;
    	lastStep = i;
    	if (lastStep<firstStep) setFirstStep(lastStep);
    	setChanged();
    	notifyObservers("laststep");
    }
    
    public int getLastStep() {
    	return lastStep;
    }
    
    public void setName(String string) {
    	name = string;
    	setChanged();
    	notifyObservers("songname");
    }

    public String getName() {
    	if (!used) return "(Unused)";
		return name;
    }

    public void deleteStep(int stepIndex) {
    	if (stepIndex>steps.size()-1) return;
    	steps.remove(stepIndex);
    	notifySong();
    	
    }
    
    public void insertStep(int stepIndex, Step s) {
    	
    	List<Step> newList = new ArrayList<Step>();
    	
    	for (int i=0;i<stepIndex;i++)
    		newList.add(steps.get(i));
    	
    	newList.add(s);
    	
    	for (int i=stepIndex;i<steps.size();i++)
    		newList.add(steps.get(i));
   
    	steps = newList;
    	if (!used) {
    		used = true;
    		setChanged();
    		notifyObservers("songname");
    	}
    	notifySong();
    }
    
    private void notifySong() {
    	setChanged();
    	notifyObservers("song");		
	}

	public void setStep(int i, Step s) {
    	steps.set(i, s);
    	notifySong();
    }

    public Step getStep(int i) {
		return steps.get(i);
    }

    public int getStepAmount() {
    	return steps.size();
    }
    
    public class Step {
     
    	private int sequence = 0;
        private int repeats = 1;

        public void setSequence(int i) {
        	if (i<0||i>98) return;
        	sequence = i;
        	notifySong();
        }

        public int getSequence() {
    		return sequence;
        }

        public void setRepeats(int i) {
        	if (i<0||i>99) return;
        	repeats = i;
        	notifySong();
        }

        public int getRepeats() {
    		return repeats;
        }
    }
    
    public int getStepBarAmount(int step) {
    	MpcSequence seq = sequencer.getSequence(steps.get(step).getSequence());
    	if (!seq.isUsed()) return 0;
    	return seq.getLastBar();
    }
    
    public boolean isUsed() {
    	return used;
    }

	public void setUsed(boolean b) {
		used = true;
		setChanged();
		notifyObservers("used");
	}
}
