/* Generated by Together */

package com.mpc.sampler;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;

import com.mpc.tootextensions.MpcMixParameters;
import com.mpc.tootextensions.MpcProgram;

public class Program extends Observable implements Cloneable, MpcProgram {

	private String name;
	private List<NoteParameters> noteParameters = new ArrayList<NoteParameters>();
	private List<Pad> pads = new ArrayList<Pad>();
	private Slider slider;

	private int midiProgramChange = 1;

	public Program() {

		for (int i = 0; i < 64; i++) {
			NoteParameters n = new NoteParameters(i);
			n.setSoundNumber(-1);
			noteParameters.add(n);
		}

		for (int i = 0; i < 64; i++) {
			Pad p = new Pad(i);
			pads.add(p);
		}

		slider = new Slider();

	}

	public int getNumberOfSamples() {
		int counter = 0;
		for (int i = 0; i < 64; i++) {
			NoteParameters np = getNoteParameters(i + 35);
			if (np.getSndNumber() != -1) counter++;
		}

		return counter;
	}

	public void setName(String s) {
		name = s;
	}

	@Override
	public String getName() {
		return name;
	}

	@Override
	public NoteParameters getNoteParameters(int i) {
		if (i < 35 || i > 98) return null;
		return noteParameters.get(i - 35);
	}

	public Pad getPad(int i) {
		return pads.get(i);
	}

	@Override
	public MpcMixParameters getPadMixer(int padNumber) {
		return pads.get(padNumber).getMixerChannel();
	}

	@Override
	public int getPadNumberFromNote(int note) {

		if (note < 35 || note > 98) return -1;

		for (int i = 0; i < 64; i++)
			if (pads.get(i).getNote() == note) return i;

		return -1;
	}

	public List<NoteParameters> getNotesParameters() {
		return noteParameters;
	}

	public Slider getSlider() {
		return slider;
	}

	public void setNoteParameters(int i, NoteParameters nn) {
		noteParameters.set(i, nn);
	}

	public int getMidiProgramChange() {
		return midiProgramChange;
	}

	public void setMidiProgramChange(int i) {

		if (i < 1 || i > 128) return;

		this.midiProgramChange = i;

		setChanged();
		notifyObservers("midiprogramchange");
	}

	public void initPadAssign() {
		Sampler.getLastNp(this).deleteObservers();
		Sampler.getLastPad(this).deleteObservers();
		for (int i = 0; i < 64; i++)
			pads.get(i).setNote(Sampler.initMasterPadAssign[i]);
	}

	@Override
	public int getNoteFromPad(int i) {
		return pads.get(i).getNote();
	}
}